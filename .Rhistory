real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 2);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 5000, chains = 2)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 20);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 5000, chains = 2)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 20);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.fit
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 10);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.fit
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 5); // normal(178, 20) is a prior too flat for stan to converge, so it's changed to normal(178, 5)
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real sigma;
}
model {
// prior
mu ~ normal(178, 20); // normal(178, 20) is a prior too flat for stan to converge, so it's changed to normal(178, 5)
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.fit
library(rethinking)
library(rstan)
library(tidyverse)
library(gridExtra)
library(skimr) # for n_unique func
library(DMwR) # for unscale func
compare = rethinking::compare
data(reedfrogs)
d_frogs =
reedfrogs %>%
mutate(tank = 1:nrow(reedfrogs))
str(d_frogs)
m12.1.1 = "
data {
int N_tank;
int N[N_tank];
int S[N_tank];
int tank[N_tank];
}
parameters {
real a[N_tank];
}
transformed parameters {
real p[N_tank];
for (i in 1:N_tank){
p[i] = inv_logit(a[i]);
}
}
model {
for (i in 1:N_tank){
S[i] ~ binomial(N[i], p[i]);
}
a ~ normal(0, 1.5);
}
"
dat12.1.1 = list(
N_tank = d_frogs %>% nrow(),
N = d_frogs$density,
S = d_frogs$surv,
tank = d_frogs$tank
)
fit12.1.1 = stan(model_code = m12.1.1, data = dat12.1.1, iter = 2000, chains = 2, cores = 2)
library(rethinking)
library(rstan)
library(tidyverse)
library(gridExtra)
library(skimr) # for n_unique func
library(DMwR) # for unscale func
compare = rethinking::compare
data(reedfrogs)
d_frogs =
reedfrogs %>%
mutate(tank = 1:nrow(reedfrogs))
str(d_frogs)
m12.1.1 = "
data {
int N_tank;
int N[N_tank];
int S[N_tank];
int tank[N_tank];
}
parameters {
real a[N_tank];
}
transformed parameters {
real p[N_tank];
for (i in 1:N_tank){
p[i] = inv_logit(a[i]);
}
}
model {
for (i in 1:N_tank){
S[i] ~ binomial(N[i], p[i]);
}
a ~ normal(0, 1.5);
}
"
dat12.1.1 = list(
N_tank = d_frogs %>% nrow(),
N = d_frogs$density,
S = d_frogs$surv,
tank = d_frogs$tank
)
fit12.1.1 = stan(model_code = m12.1.1, data = dat12.1.1, iter = 2000, chains = 2, cores = 2)
m12.1.1 = "
data {
int N_tank;
int N[N_tank];
int S[N_tank];
int tank[N_tank];
}
parameters {
real a[N_tank];
}
transformed parameters {
real p[N_tank];
for (i in 1:N_tank){
p[i] = inv_logit(a[i]);
}
}
model {
for (i in 1:N_tank){
S[i] ~ binomial(N[i], p[i]);
}
a ~ normal(0, 1.5);
}
"
dat12.1.1 = list(
N_tank = d_frogs %>% nrow(),
N = d_frogs$density,
S = d_frogs$surv,
tank = d_frogs$tank
)
fit12.1.1 = stan(model_code = m12.1.1, data = dat12.1.1, iter = 2000, chains = 2, cores = 2)
library(rethinking)
library(rstan)
library(tidyverse)
library(gridExtra)
library(skimr) # for n_unique func
library(DMwR) # for unscale func
compare = rethinking::compare
p11.1.1 =
d_Trolley %>%
ggplot() +
geom_histogram(aes(response), bins = 7, binwidth = .3) +
scale_x_continuous("Response", labels = c(1:7), breaks = c(1:7)) +
scale_y_continuous("Frequency")
data("Trolley")
d_Trolley = Trolley
p11.1.1 =
d_Trolley %>%
ggplot() +
geom_histogram(aes(response), bins = 7, binwidth = .3) +
scale_x_continuous("Response", labels = c(1:7), breaks = c(1:7)) +
scale_y_continuous("Frequency")
p11.1.2 =
d_Trolley %>%
group_by(response) %>%
summarise(p = n() / nrow(d_Trolley)) %>%
ggplot() +
geom_line(aes(x=response, y=cumsum(p))) +
geom_point(aes(x=response, y=cumsum(p)), shape = 21) +
scale_x_continuous("Response", labels = c(1:7), breaks = c(1:7)) +
scale_y_continuous("Cumulative proportion")
grid.arrange(p11.1.1, p11.1.2, nrow=1)
# Data for prediction
A = 0:1
C = 0:1
I = 0:1
scenario = expand.grid(A=0:1,C=0:1,I=0:1) %>%
filter(!(A == 1 & C==1)) %>%
mutate(case = rep(c(1,2,3), 2))
m11.3.1 = "
data {
int N;
int R[N]; // response
int A[N]; // action
int C[N]; // contact
int I[N]; // intention
int pred_A[6];
int pred_C[6];
int pred_I[6];
}
parameters {
real bA;
real bC;
real bI;
real bIC;
real bIA;
ordered[6] cutpoints;
}
transformed parameters {
real phi[N];
real BI[N];
for (i in 1:N){
BI[i] = bI * I[i] + bIA * A[i] + bIC * C[i];
phi[i] = bA * A[i] + bC * C[i] + BI[i] * I[i];
}
}
model {
for (i in 1:N){
R[i] ~ ordered_logistic(phi[i], cutpoints);
}
bA ~ normal(0,0.5);
bC ~ normal(0,0.5);
bI ~ normal(0,0.5);
bIA ~ normal(0,0.5);
bIC ~ normal(0,0.5);
cutpoints ~ normal(0,1.5);
}
generated quantities {
real log_lik[N];
real pred_phi[6];
int pred_R[6];
for (i in 1:N){
log_lik[i] = ordered_logistic_lpmf(R[i] | phi[i], cutpoints);
}
for (i in 1:6){
pred_phi[i] = bA * pred_A[i] + bC * pred_C[i] + (bI * pred_I[i] + bIA * pred_A[i] + bIC * pred_C[i]) * pred_I[i];
pred_R[i] = ordered_logistic_rng(pred_phi[i], cutpoints);
}
}
"
dat11.3.1 <- list(
N = nrow(d_Trolley),
R = d_Trolley$response %>% as.integer(),
A = d_Trolley$action %>% as.integer(),
I = d_Trolley$intention %>% as.integer(),
C = d_Trolley$contact %>% as.integer(),
pred_A = scenario$A %>% as.integer(),
pred_C = scenario$C %>% as.integer(),
pred_I = scenario$I %>% as.integer())
init11.3.1 <- function() {
list(cutpoints = c(-1.9, -1.2, -0.7, 0.2, 0.9, 1.8))
}
fit11.3.1 = stan(model_code = m11.3.1, data = dat11.3.1, chains = 2, cores = 2, warmup = 1000, init = init11.3.1, iter = 2000)
m11.3.1 = "
data {
int N;
int R[N]; // response
int A[N]; // action
int C[N]; // contact
int I[N]; // intention
int pred_A[6];
int pred_C[6];
int pred_I[6];
}
parameters {
real bA;
real bC;
real bI;
real bIC;
real bIA;
ordered[6] cutpoints;
}
transformed parameters {
real phi[N];
real BI[N];
for (i in 1:N){
BI[i] = bI * I[i] + bIA * A[i] + bIC * C[i];
phi[i] = bA * A[i] + bC * C[i] + BI[i] * I[i];
}
}
model {
for (i in 1:N){
R[i] ~ ordered_logistic(phi[i], cutpoints);
}
bA ~ normal(0,0.5);
bC ~ normal(0,0.5);
bI ~ normal(0,0.5);
bIA ~ normal(0,0.5);
bIC ~ normal(0,0.5);
cutpoints ~ normal(0,1.5);
}
generated quantities {
real log_lik[N];
real pred_phi[6];
int pred_R[6];
for (i in 1:N){
log_lik[i] = ordered_logistic_lpmf(R[i] | phi[i], cutpoints);
}
for (i in 1:6){
pred_phi[i] = bA * pred_A[i] + bC * pred_C[i] + (bI * pred_I[i] + bIA * pred_A[i] + bIC * pred_C[i]) * pred_I[i];
pred_R[i] = ordered_logistic_rng(pred_phi[i], cutpoints);
}
}
"
dat11.3.1 <- list(
N = nrow(d_Trolley),
R = d_Trolley$response %>% as.integer(),
A = d_Trolley$action %>% as.integer(),
I = d_Trolley$intention %>% as.integer(),
C = d_Trolley$contact %>% as.integer(),
pred_A = scenario$A %>% as.integer(),
pred_C = scenario$C %>% as.integer(),
pred_I = scenario$I %>% as.integer())
init11.3.1 <- function() {
list(cutpoints = c(-1.9, -1.2, -0.7, 0.2, 0.9, 1.8))
}
fit11.3.1 = stan(model_code = m11.3.1, data = dat11.3.1, chains = 2, cores = 2, warmup = 1000, init = init11.3.1, iter = 2000)
library(rethinking)
library(rstan)
library(tidyverse)
library(gridExtra)
library(skimr) # for n_unique func
library(DMwR) # for unscale func
compare = rethinking::compare
data("Trolley")
d_Trolley = Trolley
p11.1.1 =
d_Trolley %>%
ggplot() +
geom_histogram(aes(response), bins = 7, binwidth = .3) +
scale_x_continuous("Response", labels = c(1:7), breaks = c(1:7)) +
scale_y_continuous("Frequency")
p11.1.2 =
d_Trolley %>%
group_by(response) %>%
summarise(p = n() / nrow(d_Trolley)) %>%
ggplot() +
geom_line(aes(x=response, y=cumsum(p))) +
geom_point(aes(x=response, y=cumsum(p)), shape = 21) +
scale_x_continuous("Response", labels = c(1:7), breaks = c(1:7)) +
scale_y_continuous("Cumulative proportion")
grid.arrange(p11.1.1, p11.1.2, nrow=1)
p11.1.3 =
d_Trolley %>%
group_by(response) %>%
summarise(p = n() / nrow(d_Trolley)) %>%
mutate(cum_logit = p %>% cumsum() %>% logit()) %>%
ggplot() +
geom_line(aes(x=response, y=cum_logit)) +
geom_point(aes(x=response, y=cum_logit), shape = 21) +
scale_x_continuous("Response", labels = c(1:7), breaks = c(1:7)) +
scale_y_continuous("Cumulative proportion")
p11.1.3
p11.1.4 =
d_Trolley %>%
group_by(response) %>%
summarise(p = n() / nrow(d_Trolley)) %>%
mutate(p_lower = c(0, cumsum(p))[1:7],
p_upper = cumsum(p)) %>%
ggplot() +
geom_line(aes(x=response, y=cumsum(p))) +
geom_point(aes(x=response, y=cumsum(p)), shape = 21) +
geom_segment(aes(x=response+.02, xend=response+.02, y=p_lower, yend=p_upper), color="blue") +
geom_segment(aes(x=response, xend=response, y=0, yend=p_upper)) +
scale_x_continuous("Response", labels = c(1:7), breaks = c(1:7)) +
scale_y_continuous("Cumulative proportion")
p11.1.4
# Data for prediction
A = 0:1
C = 0:1
I = 0:1
scenario = expand.grid(A=0:1,C=0:1,I=0:1) %>%
filter(!(A == 1 & C==1)) %>%
mutate(case = rep(c(1,2,3), 2))
m11.3.1 = "
data {
int N;
int R[N]; // response
int A[N]; // action
int C[N]; // contact
int I[N]; // intention
int pred_A[6];
int pred_C[6];
int pred_I[6];
}
parameters {
real bA;
real bC;
real bI;
real bIC;
real bIA;
ordered[6] cutpoints;
}
transformed parameters {
real phi[N];
real BI[N];
for (i in 1:N){
BI[i] = bI * I[i] + bIA * A[i] + bIC * C[i];
phi[i] = bA * A[i] + bC * C[i] + BI[i] * I[i];
}
}
model {
for (i in 1:N){
R[i] ~ ordered_logistic(phi[i], cutpoints);
}
bA ~ normal(0,0.5);
bC ~ normal(0,0.5);
bI ~ normal(0,0.5);
bIA ~ normal(0,0.5);
bIC ~ normal(0,0.5);
cutpoints ~ normal(0,1.5);
}
generated quantities {
real log_lik[N];
real pred_phi[6];
int pred_R[6];
for (i in 1:N){
log_lik[i] = ordered_logistic_lpmf(R[i] | phi[i], cutpoints);
}
for (i in 1:6){
pred_phi[i] = bA * pred_A[i] + bC * pred_C[i] + (bI * pred_I[i] + bIA * pred_A[i] + bIC * pred_C[i]) * pred_I[i];
pred_R[i] = ordered_logistic_rng(pred_phi[i], cutpoints);
}
}
"
dat11.3.1 <- list(
N = nrow(d_Trolley),
R = d_Trolley$response %>% as.integer(),
A = d_Trolley$action %>% as.integer(),
I = d_Trolley$intention %>% as.integer(),
C = d_Trolley$contact %>% as.integer(),
pred_A = scenario$A %>% as.integer(),
pred_C = scenario$C %>% as.integer(),
pred_I = scenario$I %>% as.integer())
init11.3.1 <- function() {
list(cutpoints = c(-1.9, -1.2, -0.7, 0.2, 0.9, 1.8))
}
fit11.3.1 = stan(model_code = m11.3.1, data = dat11.3.1, chains = 2, cores = 2, warmup = 1000, init = init11.3.1, iter = 2000)
