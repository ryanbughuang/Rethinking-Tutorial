xlim(140, 190) +
ylim(4, 9) +
ggtitle("MCMC Posterior")
grid.arrange(plt4, plt5, ncol=1)
prior.data = tibble(
alpha = rnorm(100, mean = 178, sd=20),
beta  = rnorm(100, mean = 0, sd = 10))
p = ggplot(data = NULL)
for (i in 1:100) {
d2$pred_height =
prior.data[[i,"alpha"]] +
prior.data[[i,"beta"]] * (d2$weight - mean(d2$weight))
p = p +
geom_line(data=d2, aes(weight, pred_height), alpha=.3)
}
p
prior.data2 = tibble(
alpha = rnorm(100, mean = 178, sd=20),
beta  = rlnorm(100, mean = 0, sd = 1)) # the only thing changed
# dens(prior.data2$beta)
p2 = ggplot(data = NULL)
for (i in 1:100) {
d2$pred_height =
prior.data2[[i,"alpha"]] +
prior.data2[[i,"beta"]] * (d2$weight - mean(d2$weight))
p2 = p2 +
geom_line(data=d2, aes(weight, pred_height), alpha=.3)
}
p2
LR.model = "
data {
int N;
vector[N] x;
vector[N] y;
}
parameters {
real alpha;
real<lower=0> beta;
real sigma;
}
model {
vector[N] mu = alpha + beta * x;
// prior
alpha ~ normal(178, 20);
beta ~ lognormal(0, 1);
sigma ~ uniform(0,50);
// model
y ~ normal(mu, sigma);
}
generated quantities {
real pred_y[N];
vector[N] mu = alpha + beta * x;
mu = alpha + beta * x;
pred_y = normal_rng(mu, sigma);
}
"
LR.data = list(
N = nrow(d2),
x = d2$weight.c,
y = d2$height
)
LR.fit = stan(model_code = LR.model,
data = LR.data,
chains = 2,
iter = 1000,
cores = 2)
LR.post = as.data.frame(LR.fit)
pred_mu = LR.post %>%
select(contains("mu"))
CI = data.frame(
mean = pred_mu %>% apply(., 2, mean),
L_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[2,],
weight = d2$weight)
pred_mu = LR.post %>%
select(contains("mu"))
CI = data.frame(
mean = pred_mu %>% apply(., 2, mean),
L_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[2,],
weight = d2$weight)
HPDI
LR.data = list(
N = nrow(d2),
x = d2$weight.c,
y = d2$height
)
LR.data
d2$weight.c = d2$weight - mean(d2$weight)
prior.data2 = tibble(
alpha = rnorm(100, mean = 178, sd=20),
beta  = rlnorm(100, mean = 0, sd = 1)) # the only thing changed
# dens(prior.data2$beta)
p2 = ggplot(data = NULL)
for (i in 1:100) {
d2$pred_height =
prior.data2[[i,"alpha"]] +
prior.data2[[i,"beta"]] * (d2$weight - mean(d2$weight))
p2 = p2 +
geom_line(data=d2, aes(weight, pred_height), alpha=.3)
}
p2
library(rethinking)
library(tidyverse)
library(gridExtra)
library(rstan)
data(Howell1)
d <- Howell1
d2 <- d[ d$age >= 18 , ]
d2 %>%
ggplot() +
geom_histogram(aes(height))
# setting grid
grid.size = 100
mu.list <- seq( from=140, to=190 , length.out=grid.size )
sigma.list <- seq( from=4 , to=9 , length.out=grid.size )
post = expand.grid( mu=mu.list , sigma=sigma.list)
post
# prior
post = post %>%
mutate(prior_mu =
apply(., 1, function(x) dnorm(x = x[["mu"]],
mean = 178,
sd = 20,
log = T)),
prior_sigma =
apply(., 1, function(x) dunif(x = x[["sigma"]],
min = 0,
max = 50,
log = T)))
post
# Model likelihood
grid_function <- function(mu, sigma){
dnorm(d2$height, mean = mu, sd = sigma, log = T) %>%
sum() }
post = post %>%
mutate(model_likelihood =
apply(.,1, function(x) grid_function(x[["mu"]], x[["sigma"]]))
) %>%
mutate(prior_likelohood = prior_mu + prior_sigma,
post_likelihood = model_likelihood + prior_mu + prior_sigma
) %>%
mutate(post_prob = exp(post_likelihood - max(post_likelihood)),
model_prob = exp(model_likelihood - max(model_likelihood)),
prior_prob = exp(prior_likelohood - max(prior_likelohood)))
post
# Plotting
{
plt1 = post %>%
ggplot()+
geom_point(aes(mu, sigma), size=50/grid.size, shape=16)+
ggtitle("raw grid")
plt2 = post %>%
ggplot()+
geom_point(aes(mu, sigma, color=prior_prob), size=50/grid.size, shape=16) +
scale_colour_gradientn(colours = topo.colors(10)) +
ggtitle("Prior")
plt3 = post %>%
ggplot() +
geom_point(aes(mu, sigma, color=model_prob), size=50/grid.size, shape=16) +
scale_colour_gradientn(colours = topo.colors(10)) +
ggtitle("Model likelihood")
plt4 = post %>%
ggplot() +
geom_point(aes(mu, sigma, color=post_prob), size=50/grid.size, shape=16) +
scale_colour_gradientn(colours = topo.colors(10)) +
ggtitle("Grid Posterior")
}
grid.arrange(plt1,plt2,plt3,plt4, ncol=1)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 20);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 5000, chains = 2)
normal.post = normal.fit %>%
as.data.frame() %>%
select(mu, sigma)
plt5 = normal.post %>%
ggplot(aes(mu, sigma)) +
geom_bin2d(bins=100) +
scale_fill_distiller(palette=1, direction=-1) +
xlim(140, 190) +
ylim(4, 9) +
ggtitle("MCMC Posterior")
grid.arrange(plt4, plt5, ncol=1)
d2$weight.c = d2$weight - mean(d2$weight)
prior.data = tibble(
alpha = rnorm(100, mean = 178, sd=20),
beta  = rnorm(100, mean = 0, sd = 10))
p = ggplot(data = NULL)
for (i in 1:100) {
d2$pred_height =
prior.data[[i,"alpha"]] +
prior.data[[i,"beta"]] * (d2$weight - mean(d2$weight))
p = p +
geom_line(data=d2, aes(weight, pred_height), alpha=.3)
}
p
prior.data2 = tibble(
alpha = rnorm(100, mean = 178, sd=20),
beta  = rlnorm(100, mean = 0, sd = 1)) # the only thing changed
p2 = ggplot(data = NULL)
for (i in 1:100) {
d2$pred_height =
prior.data2[[i,"alpha"]] +
prior.data2[[i,"beta"]] * (d2$weight - mean(d2$weight))
p2 = p2 +
geom_line(data=d2, aes(weight, pred_height), alpha=.3)
}
p2
LR.model = "
data {
int N;
vector[N] x;
vector[N] y;
}
parameters {
real alpha;
real<lower=0> beta;
real sigma;
}
model {
vector[N] mu = alpha + beta * x;
// prior
alpha ~ normal(178, 20);
beta ~ lognormal(0, 1);
sigma ~ uniform(0,50);
// model
y ~ normal(mu, sigma);
}
generated quantities {
real pred_y[N];
vector[N] mu = alpha + beta * x;
mu = alpha + beta * x;
pred_y = normal_rng(mu, sigma);
}
"
LR.data = list(
N = nrow(d2),
x = d2$weight.c,
y = d2$height
)
LR.fit = stan(model_code = LR.model,
data = LR.data,
chains = 2,
iter = 1000,
cores = 2)
LR.post = as.data.frame(LR.fit)
pred_mu = LR.post %>%
select(contains("mu"))
CI = data.frame(
mean = pred_mu %>% apply(., 2, mean),
L_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[2,],
weight = d2$weight)
CI %>%
ggplot() +
geom_point(data = d2, aes(weight, height), color="blue", alpha=.3) +
geom_line(aes(weight, mean)) +
geom_ribbon(aes(x=weight,ymin=L_HPDI, ymax=H_HPDI), alpha=.3) +
ggtitle("89% Prediction Interval")
pred_y = LR.post %>%
select(contains("pred_y"))
PI = data.frame(
mean = pred_y %>% apply(., 2, mean),
L_HPDI = pred_y %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_y %>% apply(.,2,HPDI) %>% .[2,],
weight = d2$weight)
PI %>%
ggplot() +
geom_point(data = d2, aes(weight, height), color="blue", alpha=.3) +
geom_line(aes(weight, mean)) +
geom_ribbon(aes(x=weight,ymin=L_HPDI, ymax=H_HPDI), alpha=.3) +
ggtitle("89% Prediction Interval")
ggplot()+
geom_point(data = d2, aes(weight, height), color="blue", alpha=.3) +
geom_line(data=CI, aes(weight, mean)) +
geom_ribbon(data=CI, aes(x=weight, ymin=L_HPDI, ymax=H_HPDI), alpha=.5) +
geom_ribbon(data=PI, aes(x=weight,ymin=L_HPDI, ymax=H_HPDI), alpha=.2)
d %>%
ggplot() +
geom_point(aes(scale(weight), height))
PLR.model = "
data {
int N;
vector[N] x;
vector[N] y;
}
parameters {
real alpha;
real<lower=0> beta1;
real beta2; // add another coefficient
real sigma;
}
model {
vector[N] mu;
// prior
alpha ~ normal(178, 20);
beta1 ~ lognormal(0, 1);
beta2 ~ normal(0, 10); // add another prior
sigma ~ uniform(0, 50);
// model
mu = alpha + beta1 * x + beta2 * (x .* x); // .* : elementwise product
y ~ normal(mu, sigma);
}
generated quantities {
real pred_y[N];
vector[N] mu;
mu = alpha + beta1 * x + beta2 * (x .* x); // .* : elementwise product
pred_y = normal_rng(mu, sigma);
}
"
PLR.data = list(
N = nrow(d),
x = scale(d$weight)[,1],
y = d$height
)
PLR.fit = stan(model_code = PLR.model,
data = PLR.data,
chains = 2,
cores = 2,
iter = 1000)
PLR.fit
PLR.post = as.data.frame(PLR.fit)
# CI
pred_mu = PLR.post %>%
select(contains("mu"))
CI = data.frame(
mean = pred_mu %>% apply(., 2, mean),
L_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[2,],
weight = d$weight)
pred_y = PLR.post %>%
select(contains("pred_y"))
PI = data.frame(
mean = pred_y %>% apply(., 2, mean),
L_HPDI = pred_y %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_y %>% apply(.,2,HPDI) %>% .[2,],
weight = d$weight)
ggplot()+
geom_point(data = d, aes(weight, height), color="blue", alpha=.3) +
geom_line(data=CI, aes(weight, mean)) +
geom_ribbon(data=CI, aes(x=weight, ymin=L_HPDI, ymax=H_HPDI), alpha=.8) +
geom_ribbon(data=PI, aes(x=weight,ymin=L_HPDI, ymax=H_HPDI), alpha=.2) +
xlim(5, 60)
summary(PLR.fit, pars = c("alpha", "beta1", "beta2", "sigma"))
summary(PLR.fit, pars = c("alpha", "beta1", "beta2", "sigma"), probs=c(.25, .5, .75))
summary(PLR.fit, pars = c("alpha", "beta1", "beta2", "sigma"), probs=c(.75))
print(PLR.fit, pars = c("alpha", "beta1", "beta2", "sigma"), probs=c(.75))
print(PLR.fit, pars = c("alpha", "beta1", "beta2", "sigma"), probs=c(.25, .5, .75))
# CI
pred_mu = PLR.post %>%
select(contains("mu"))
CI = data.frame(
mean = pred_mu %>% apply(., 2, mean),
L_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_mu %>% apply(.,2,HPDI) %>% .[2,],
weight = d$weight)
pred_y = PLR.post %>%
select(contains("pred_y"))
PI = data.frame(
mean = pred_y %>% apply(., 2, mean),
L_HPDI = pred_y %>% apply(.,2,HPDI) %>% .[1,],
H_HPDI = pred_y %>% apply(.,2,HPDI) %>% .[2,],
weight = d$weight)
ggplot()+
geom_point(data = d, aes(weight, height), color="blue", alpha=.3) +
geom_line(data=CI, aes(weight, mean)) +
geom_ribbon(data=CI, aes(x=weight, ymin=L_HPDI, ymax=H_HPDI), alpha=.8) +
geom_ribbon(data=PI, aes(x=weight,ymin=L_HPDI, ymax=H_HPDI), alpha=.2) +
xlim(5, 60)
ggplot()+
geom_point(data = d, aes(weight, height), color="blue", alpha=.3) +
geom_line(data=CI, aes(weight, mean)) +
geom_ribbon(data=CI, aes(x=weight, ymin=L_HPDI, ymax=H_HPDI), alpha=.8) +
geom_ribbon(data=PI, aes(x=weight,ymin=L_HPDI, ymax=H_HPDI), alpha=.2)
ggplot()+
geom_point(data = d, aes(weight, height), color="blue", alpha=.3) +
geom_line(data=CI, aes(weight, mean)) +
geom_ribbon(data=CI, aes(x=weight, ymin=L_HPDI, ymax=H_HPDI), alpha=.6) +
geom_ribbon(data=PI, aes(x=weight,ymin=L_HPDI, ymax=H_HPDI), alpha=.2)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 2);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 5000, chains = 2)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 20);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 5000, chains = 2)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 20);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.fit
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 10);
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.fit
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
// prior
mu ~ normal(178, 5); // normal(178, 20) is a prior too flat for stan to converge, so it's changed to normal(178, 5)
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.model = "
data {
int N;
vector[N] x;
}
parameters {
real mu;
real sigma;
}
model {
// prior
mu ~ normal(178, 20); // normal(178, 20) is a prior too flat for stan to converge, so it's changed to normal(178, 5)
sigma ~ uniform(0, 50);
// model
x ~ normal(mu, sigma);
}
"
normal.data = list(N = nrow(d2), x = d2$height)
normal.fit = stan(model_code = normal.model, data = normal.data, iter = 10000, chains = 2)
normal.fit
